import asyncio
import os
import random
from telethon import TelegramClient, errors, functions, types
from openpyxl import load_workbook
from datetime import datetime
from Text import FullText

# üîê API Telegram
api_id = 22325330
api_hash = '2cd1e042d95dfe4cf34b4d58309820cc'
session_name = 'main_account'


media_folder = 'media'

excel_file = 'result.xlsx'

log_file = 'log.txt'

def read_links_from_excel(filename):
    wb = load_workbook(filename)
    ws = wb.active
    links = []
    for row in ws.iter_rows(min_row=3, max_col=3):
        cell = row[2].value  # –∏–Ω–¥–µ–∫—Å 2 = –∫–æ–ª–æ–Ω–∫–∞ C
        if cell and isinstance(cell, str) and 't.me' in cell:
            links.append(cell.strip())

    for row in ws.iter_rows(min_row=3, min_col=7, max_col=7):
        cell = row[0].value  # –∫–æ–ª–æ–Ω–∫–∞ G ‚Äî —ç—Ç–æ index 6, –Ω–æ min_col=7 –¥–∞—ë—Ç index 0
        if cell and isinstance(cell, str) and 't.me' in cell:
            links.append(cell.strip())

    return links


# ‚úèÔ∏è –õ–æ–≥–≥–µ—Ä
def log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(f"[{timestamp}] {message}\n")

# üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
async def send_media_message(client, entity, message, media_folder):
    try:
        images = [os.path.join(media_folder, f) for f in os.listdir(media_folder)
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
        if not images:
            log(f"‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ '{media_folder}'")
            return
        photo_path = random.choice(images)
        await client.send_file(entity, photo_path)
        await client.send_message(entity, message, parse_mode="HTML")
        log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {entity.title}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ {getattr(entity, 'title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async def main():
    #links = read_links_from_excel(excel_file)
    links = [
        'https://t.me/Testedies',
        'https://t.me/Lolizesies',
    ]
    log("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞")
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()

    for link in links:
        try:
            log(f"‚û°Ô∏è –†–∞–±–æ—Ç–∞–µ–º —Å: {link}")
            entity = await client.get_entity(link)

            # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å
            try:
                await client(functions.channels.JoinChannelRequest(channel=entity))
                log(f"‚úÖ –í—Å—Ç—É–ø–∏–ª–∏ –≤: {link}")
            except errors.UserAlreadyParticipantError:
                log(f"üîπ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫: {link}")
            except Exception as e:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ {link}: {e}")
                continue

            # –ö–∞–Ω–∞–ª —Å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º
            if isinstance(entity, types.Channel) and entity.broadcast:
                posts = await client.get_messages(entity, limit=10)
                discussion_found = False
                for post in posts:
                    if post.replies and post.replies.comments and post.replies.channel_id:
                        try:
                            discussion_chat = await client.get_entity(post.replies.channel_id)
                            await send_media_message(client, discussion_chat, FullText, media_folder)
                            discussion_found = True
                            break
                        except Exception as e:
                            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {post.id} –≤ {link}: {e}")
                if not discussion_found:
                    log(f"‚ö†Ô∏è –ù–µ—Ç –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {link}")

            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —á–∞—Ç
            elif isinstance(entity, (types.Chat, types.Channel)):

                await send_media_message(client, entity, FullText, media_folder)



            # –ü–∞—É–∑–∞
            delay = random.uniform(7, 12)
            log(f"‚è≥ –ñ–¥—ë–º {round(delay, 2)} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º")
            await asyncio.sleep(delay)

            # –ü–æ–∫–∏–¥–∞–µ–º
            try:
                await client(functions.channels.LeaveChannelRequest(channel=entity))
                log(f"üö™ –í—ã—à–ª–∏ –∏–∑: {link}")
            except Exception as e:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ {link}: {e}")

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}")

    await client.disconnect()
    log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    asyncio.run(main())


