import asyncio
import os
import random
from telethon import TelegramClient, errors, functions, types
from telethon.errors import ChatSendMediaForbiddenError
from telethon.errors.rpcerrorlist import FloodWaitError
from openpyxl import load_workbook, Workbook
from datetime import datetime
from Text import FullText

# üîê API Telegram
api_id = 22325330
api_hash = '2cd1e042d95dfe4cf34b4d58309820cc'
session_name = 'main_accounti'

media_folder = 'media'
excel_file = 'result.xlsx'
pending_file = 'pending.xlsx'
log_file = 'log.txt'
monitor_file = 'sent_monitoring.xlsx'

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
def log(message):
    ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, 'a', encoding='utf-8') as f:
        f.write(f"[{ts}] {message}\n")

# === –ß—Ç–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ Excel ===
def read_links_from_excel(filename):
    wb = load_workbook(filename)
    ws = wb.active
    links = []
    for row in ws.iter_rows(min_row=3, min_col=7, max_col=7):
        cell = row[0]
        if cell.value and isinstance(cell.value, str) and 't.me' in cell.value:
            links.append((cell.value.strip(), cell))
    return wb, ws, links

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ pending.xlsx ===
def save_pending_link(link):
    try:
        wb_p = load_workbook(pending_file) if os.path.exists(pending_file) else Workbook()
        ws_p = wb_p.active
        if ws_p.max_row == 1 and ws_p.cell(1,1).value != '–°—Å—ã–ª–∫–∞':
            ws_p.insert_rows(1)
            ws_p.cell(1,1,'–°—Å—ã–ª–∫–∞')
        ws_p.append([link])
        wb_p.save(pending_file)
        log(f"üïì –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ: {link}")
    except Exception as e:
        log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ pending.xlsx: {e}")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
def save_monitoring(records):
    try:
        wb_m = load_workbook(monitor_file) if os.path.exists(monitor_file) else Workbook()
        ws_m = wb_m.active
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if ws_m.max_row < 2:
            ws_m.delete_rows(1)
            ws_m.append(['–°—Å—ã–ª–∫–∞','–ù–∞–∑–≤–∞–Ω–∏–µ','–î–∞—Ç–∞','–°—Ç–∞—Ç—É—Å'])
        for link, title, dt, status in records:
            ws_m.append([link, title, dt, status])
        wb_m.save(monitor_file)
        log(f"‚úÖ –û—Ç—á—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(records)} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' ===
async def send_media_message(client, entity, message, media_folder):
    title = getattr(entity, 'title', str(getattr(entity,'id','unknown')))
    images = [os.path.join(media_folder, f) for f in os.listdir(media_folder)
              if f.lower().endswith(('.jpg','.jpeg','.png'))]
    if not images:
        log(f"‚ö†Ô∏è –í –ø–∞–ø–∫–µ '{media_folder}' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return False, title, None
    photo = random.choice(images)
    sent_media = None
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    try:
        sent_media = await client.send_file(entity, photo)
        log(f"üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: {title}")
    except ChatSendMediaForbiddenError:
        log(f"üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è: {title}")
    except FloodWaitError as e:
        log(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ (FloodWait) –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ {title}: –∂–¥–µ–º {e.seconds} —Å–µ–∫")
        await asyncio.sleep(e.seconds+5)
        return False, title, None
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ {title}: {e}")
    await asyncio.sleep(random.uniform(2,5))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        sent_text = await client.send_message(entity, message, parse_mode='HTML')
        log(f"‚úâÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤: {title}")
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ'
        try:
            to_me = 'me'
            if sent_media:
                await client.forward_messages(to_me, sent_media.id, entity)
            await client.forward_messages(to_me, sent_text.id, entity)
            log(f"üìÇ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –∏–∑: {title}")
        except Exception as e:
            log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –∏–∑ {title}: {e}")
        return True, title, sent_text
    except errors.ChatWriteForbiddenError as e:
        log(f"üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è: {title}: {e}")
        return False, title, None
    except FloodWaitError as e:
        log(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ (FloodWait) –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ {title}: –∂–¥–µ–º {e.seconds} —Å–µ–∫")
        await asyncio.sleep(e.seconds+5)
        return False, title, None
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ {title}: {e}")
        return False, title, None

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def main():
    wb, ws, links_with_cells = read_links_from_excel(excel_file)
    monitor_records = []
    log("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()
    for link, cell in links_with_cells:
        try:
            log(f"‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏: {link}")
            entity = await client.get_entity(link)
            # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            try:
                await client(functions.channels.JoinChannelRequest(channel=entity))
                log(f"‚úÖ –í—Å—Ç—É–ø–∏–ª–∏ –≤: {link}")
            except FloodWaitError as e:
                log(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ (FloodWait) –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ {link}: –∂–¥–µ–º {e.seconds} —Å–µ–∫")
                await asyncio.sleep(e.seconds+5)
                try:
                    await client(functions.channels.JoinChannelRequest(channel=entity))
                    log(f"‚úÖ –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤: {link}")
                except Exception as ee:
                    log(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {link}: {ee}")
                    save_pending_link(link)
                    cell.value = None
                    continue
            except errors.UserAlreadyParticipantError:
                log(f"üîπ –£–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º: {link}")
            except Exception as e:
                if 'requested to join' in str(e):
                    log(f"üïì –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {link}")
                    save_pending_link(link)
                    cell.value = None
                    continue
                log(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ {link}: {e}")
                continue
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            success, title, sent_text = await send_media_message(client, entity, FullText, media_folder)
            status = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if success else '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
            monitor_records.append((link, title, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), status))
            # –û—á–∏—Å—Ç–∫–∞ –∏ pending –µ—Å–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ
            if not success:
                save_pending_link(link)
                try:
                    await client(functions.channels.LeaveChannelRequest(channel=entity))
                    log(f"üö™ –í—ã—à–ª–∏ –∏–∑: {link}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ {link}: {e}")
            cell.value = None
            await asyncio.sleep(random.uniform(7,12))
        except Exception as e:
            log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}")
            continue
    save_monitoring(monitor_records)
    wb.save(excel_file)
    await client.disconnect()
    log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    asyncio.run(main())
