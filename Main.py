from telethon import TelegramClient, errors, functions, types
import asyncio
import os
import random

api_id = 22325330
api_hash = '2cd1e042d95dfe4cf34b4d58309820cc'
session_name = 'main_account'
message_text = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'

target_links = [
    'https://t.me/Lolizesies',
    'https://t.me/Testedies',
]
media_folder = 'media'

async def send_media_message(client, entity, message, media_folder):
    try:
        images = [os.path.join(media_folder, f) for f in os.listdir(media_folder)
                  if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

        if not images:
            print('‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ media/')
            return

        photo_path = random.choice(images)
        await client.send_file(entity, photo_path, caption=message)
        print(f'üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {photo_path}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}')

# üß† –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async def main():
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()

    for link in target_links:
        try:
            print(f'\n‚û°Ô∏è –†–∞–±–æ—Ç–∞–µ–º —Å {link}')
            entity = await client.get_entity(link)

            # –ü—Ä–æ–±—É–µ–º –≤—Å—Ç—É–ø–∏—Ç—å
            try:
                await client(functions.channels.JoinChannelRequest(channel=entity))
                print(f'‚úÖ –í—Å—Ç—É–ø–∏–ª–∏ –≤ {link}')
            except errors.UserAlreadyParticipantError:
                print(f'üîπ –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ {link}')
            except Exception as e:
                print(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ {link}: {e}')
                continue

            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª
            if isinstance(entity, types.Channel) and entity.broadcast:
                posts = await client.get_messages(entity, limit=10)
                discussion_found = False
                for post in posts:
                    if post.replies and post.replies.comments and post.replies.channel_id:
                        try:
                            discussion_chat = await client.get_entity(post.replies.channel_id)
                            await send_media_message(client, discussion_chat, message_text, media_folder)
                            print(f'üì© –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫ –ø–æ—Å—Ç—É {post.id}')
                            discussion_found = True
                            break
                        except Exception as e:
                            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}')
                if not discussion_found:
                    print(f'‚ö†Ô∏è –ù–µ—Ç –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {link}')

            # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ —á–∞—Ç
            elif isinstance(entity, (types.Chat, types.Channel)):
                await send_media_message(client, entity, message_text, media_folder)

            # ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 7‚Äì12 —Å–µ–∫
            delay = random.uniform(7, 12)
            print(f'‚è≥ –ñ–¥—ë–º {round(delay, 2)} —Å–µ–∫—É–Ω–¥...')
            await asyncio.sleep(delay)

            # –ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç/–∫–∞–Ω–∞–ª
            try:
                await client(functions.channels.LeaveChannelRequest(channel=entity))
                print(f'üö™ –í—ã—à–ª–∏ –∏–∑ {link}')
            except Exception as e:
                print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ {link}: {e}')

        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}')

    await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())